#lang racket
(provide (except-out (all-defined-out)
                     ))

(require "protobuf1/protobuf.rkt")
(require "protobuf1/encoding.rkt")
(require "messages.rkt")
(require "communication.rkt")
(require "objects.rkt")
(require "geometry.rkt")
(require "../base/utils.rkt"
         "../base/coord.rkt"
         "../base/shapes.rkt"
         "../base/connection.rkt")
(require srfi/26)



(define (extract-list-of-points points-x points-y points-z)
  (if (null? points-x)
      (list)
      (cons (xyz (car points-x)(car points-y)(car points-z))
            (extract-list-of-points (cdr points-x)(cdr points-y)(cdr points-z)))))

(define (get-levels)
  (write-msg-name "GetLevels")
  (read-sized (cut deserialize (levelrepeated*) <>) (connection-in (bim-connection))))

(define (get-walls)
  (write-msg-name "GetWalls")
  (read-sized (cut deserialize (getwallmsg*) <>) (connection-in (bim-connection))))

(define (get-slabs)
  (write-msg-name "GetSlabs")
  (read-sized (cut deserialize (slabrepeated*) <>) (connection-in (bim-connection))))

(define (get-columns)
  (write-msg-name "GetColumns")
  (read-sized (cut deserialize (columnrepeated*) <>) (connection-in (bim-connection))))

(define (get-objects)
  (write-msg-name "GetObjects")
  (read-sized (cut deserialize (objectrepeated*) <>) (connection-in (bim-connection))))

(define (get-roofs)
  (write-msg-name "GetRoofs")
  (read-sized (cut deserialize (roofrepeated*) <>) (connection-in (bim-connection))))

(define (get-lines)
  (write-msg-name "GetLines")
  (read-sized (cut deserialize (getlinesmsg*) <>) (connection-in (bim-connection))))

(define (get-polylines)
  (write-msg-name "GetPolyLines")
  (read-sized (cut deserialize (getpolylinesmsg*) <>) (connection-in (bim-connection))))

(define (recreate-levels [level-list (get-levels)])
  (for ([n (length (levelrepeated-levels level-list))])
       (level (storyinfo-level (list-ref (levelrepeated-levels level-list) n)))))

(define (recreate-walls [wall-list (get-walls)])
  (for/list ([wall-info (getwallmsg-walls wall-list)])
            #;(write-msg "NewWall" wall)
            (walls (wallmsg-pts wall-info)
                  #:alignment (wallmsg-referenceline wall-info)
                  #:bottom-level (wallmsg-bottomindex wall-info)
                  #:top-level (wallmsg-upperindex wall-info)
                  #:thickness (wallmsg-thickness wall-info)
                  #:arcs (wallmsg-arcs wall-info)
                  #:type-of-material (wallmsg-type wall-info)
                  #:material (wallmsg-material wall-info)
                  #:alpha-angle (wallmsg-alphaangle wall-info)
                  #:beta-angle (wallmsg-betaangle wall-info)
                  #:type-of-profile (wallmsg-typeprofile wall-info)
                  #:height (wallmsg-height wall-info)
                  #:profile-name (wallmsg-profilename wall-info)
                  #:flipped? (wallmsg-flipped wall-info)
                  #:bottom-offset (wallmsg-bottomoffset wall-info)
                  #:layer (wallmsg-layer wall-info)
                  #:windows (wallmsg-windows wall-info)
                  #:window-order (wallmsg-windoworder wall-info)
                  #:reference-offset (wallmsg-refoffset wall-info)
                  #:ref-material (wallmsg-refmat wall-info)
                  #:opp-material (wallmsg-oppmat wall-info)
                  #:sid-material (wallmsg-sidmat wall-info))
            ))

(define (recreate-walls! [wall-list (get-walls)])
  (delete-elements (getwallmsg-guid wall-list))
  (recreate-walls wall-list))


(define (recreate-walls-material [wall-list (get-walls)] [material ""])
  (for/list ([wall-info (getwallmsg-walls wall-list)])
            #;(write-msg "NewWall" wall)
            (when (equal? "GENERIC - STRUCTURAL" (wallmsg-material wall-info))
                (begin (displayln (wallmsg-material wall-info))
                       (displayln (wallmsg-thickness wall-info))
                       (walls (wallmsg-pts wall-info)
                       #:alignment (wallmsg-referenceline wall-info)
                       #:bottom-level (wallmsg-bottomindex wall-info)
                       #:top-level (wallmsg-upperindex wall-info)
                       #:thickness (* 4 (wallmsg-thickness wall-info))
                       #:arcs (wallmsg-arcs wall-info)
                       #:type-of-material (wallmsg-type wall-info)
                       #:material (wallmsg-material wall-info)
                       #:alpha-angle (wallmsg-alphaangle wall-info)
                       #:beta-angle (wallmsg-betaangle wall-info)
                       #:type-of-profile (wallmsg-typeprofile wall-info)
                       #:height (wallmsg-height wall-info)
                       #:profile-name (wallmsg-profilename wall-info)
                       #:flipped? (wallmsg-flipped wall-info)
                       #:bottom-offset (wallmsg-bottomoffset wall-info)
                       #:layer (wallmsg-layer wall-info)
                       #:windows (wallmsg-windows wall-info)
                       #:window-order (wallmsg-windoworder wall-info)
                       #:reference-offset (wallmsg-refoffset wall-info)
                       #:ref-material (wallmsg-refmat wall-info)
                       #:opp-material (wallmsg-oppmat wall-info)
                       #:sid-material (wallmsg-sidmat wall-info))))
            ))

(define (recreate-walls-material-2 [wall-list (get-walls)] [material ""])
  (delete-elements (getwallmsg-guid wall-list))
  (for/list ([wall-info (getwallmsg-walls wall-list)])
            #;(write-msg "NewWall" wall)
            (if (equal? "Ex-Conc+Brick veneer" (wallmsg-profilename wall-info))
                (begin #;(displayln (wallmsg-material wall-info))
                       #;(displayln (wallmsg-thickness wall-info))
                       (walls (wallmsg-pts wall-info)
                              #:alignment (wallmsg-referenceline wall-info)
                              #:bottom-level (wallmsg-bottomindex wall-info)
                              #:top-level (wallmsg-upperindex wall-info)
                              #:thickness (wallmsg-thickness wall-info)
                              #:arcs (wallmsg-arcs wall-info)
                              #:type-of-material "Basic" #;(wallmsg-type wall-info)
                              #:material "Insulation_mid" #;(wallmsg-material wall-info)
                              #:alpha-angle (wallmsg-alphaangle wall-info)
                              #:beta-angle (wallmsg-betaangle wall-info)
                              ;#:type-of-profile (wallmsg-typeprofile wall-info)
                              #:height (wallmsg-height wall-info)
                              ;#:profile-name "" #;(wallmsg-profilename wall-info)
                              #:flipped? (wallmsg-flipped wall-info)
                              #:bottom-offset (wallmsg-bottomoffset wall-info)
                              #:layer (wallmsg-layer wall-info)
                              #:windows (wallmsg-windows wall-info)
                              #:window-order (wallmsg-windoworder wall-info)
                              #:reference-offset (wallmsg-refoffset wall-info)
                              #:ref-material "" #;(wallmsg-refmat wall-info)
                              #:opp-material "" #;(wallmsg-oppmat wall-info)
                              #:sid-material "" #;(wallmsg-sidmat wall-info)))
                (begin (walls (wallmsg-pts wall-info)
                              #:alignment (wallmsg-referenceline wall-info)
                              #:bottom-level (wallmsg-bottomindex wall-info)
                              #:top-level (wallmsg-upperindex wall-info)
                              #:thickness (wallmsg-thickness wall-info)
                              #:arcs (wallmsg-arcs wall-info)
                              #:type-of-material (wallmsg-type wall-info)
                              #:material (wallmsg-material wall-info)
                              #:alpha-angle (wallmsg-alphaangle wall-info)
                              #:beta-angle (wallmsg-betaangle wall-info)
                              #:type-of-profile (wallmsg-typeprofile wall-info)
                              #:height (wallmsg-height wall-info)
                              #:profile-name (wallmsg-profilename wall-info)
                              #:flipped? (wallmsg-flipped wall-info)
                              #:bottom-offset (wallmsg-bottomoffset wall-info)
                              #:layer (wallmsg-layer wall-info)
                              #:windows (wallmsg-windows wall-info)
                              #:window-order (wallmsg-windoworder wall-info)
                              #:reference-offset (wallmsg-refoffset wall-info)
                              #:ref-material (wallmsg-refmat wall-info)
                              #:opp-material (wallmsg-oppmat wall-info)
                              #:sid-material (wallmsg-sidmat wall-info))))
            ))

#|
(for ([n (length (wallrepeated-guid wall-list))])
     ;(displayln (list-ref (wallrepeated-material wall-list) n))
     ;(displayln (list-ref (wallrepeated-type wall-list) n))
     (wall (list (xy (list-ref (wallrepeated-p0x wall-list) n)
                     (list-ref (wallrepeated-p0y wall-list) n))
                 (xy (list-ref (wallrepeated-p1x wall-list) n)
                     (list-ref (wallrepeated-p1y wall-list) n)))
           #:alignment (list-ref (wallrepeated-referenceline wall-list) n)
           #:bottom-level (list-ref (wallrepeated-bottomlevel wall-list) n)
           #:thickness (list-ref (wallrepeated-thickness wall-list) n)
           #:angle (list-ref (wallrepeated-angle wall-list) n)
           #:top-level (list-ref (wallrepeated-toplevel wall-list) n)
           #:type-of-material (list-ref (wallrepeated-type wall-list) n)
           #:material (list-ref (wallrepeated-material wall-list) n)
           #:alpha-angle (list-ref (wallrepeated-alphaangle wall-list) n)
           #:beta-angle (list-ref (wallrepeated-betaangle wall-list) n)
           #:type-of-profile (list-ref (wallrepeated-typeprofile wall-list) n)))
|#
(define (recreate-slabs [slab-list (get-slabs)])
  (delete-elements (slabrepeated-guid slab-list))
  (for ([n (length (slabrepeated-guid slab-list))])
       (let ((points (list-ref (slabrepeated-points slab-list) n)))
         ;(displayln (list-ref (slabrepeated-type slab-list) n))
         ;(displayln (list-ref (slabrepeated-material slab-list) n))
         (slab (extract-list-of-points (pointsmessage-px points)(pointsmessage-py points)(pointsmessage-pz points))
               #:bottom-level (list-ref (slabrepeated-bottomlevel slab-list) n)
               #:thickness (list-ref (slabrepeated-thickness slab-list) n)
               #:type-of-material (list-ref (slabrepeated-type slab-list) n)
               #:material (list-ref (slabrepeated-material slab-list) n)))))

(define (recreate-columns [column-list (get-columns)])
  (delete-elements (columnrepeated-guid column-list))
  (for ([n (length (columnrepeated-guid column-list))])
       (column (xy (list-ref (columnrepeated-px column-list) n)(list-ref (columnrepeated-py column-list) n))
               #:bottom-level (list-ref (columnrepeated-bottomlevel column-list) n)
               #:top-level (list-ref (columnrepeated-toplevel column-list) n)
               #:circle-based? (list-ref (columnrepeated-circular column-list) n)
               #:angle (list-ref (columnrepeated-angle column-list) n)
               #:depth (list-ref (columnrepeated-depth column-list) n)
               #:width (list-ref (columnrepeated-width column-list) n)
               #:slant-angle (list-ref (columnrepeated-slantangle column-list) n)
               #:slant-direction (list-ref (columnrepeated-slantdirection column-list) n))))

(define (recreate-objects [object-list (get-objects)])
  (delete-elements (objectrepeated-guid object-list))
  (for ([n (length (objectrepeated-guid object-list))])
       (if (list-ref (objectrepeated-stairs object-list) n)
           (stairs (list-ref (objectrepeated-name object-list) n)
                   (xy (list-ref (objectrepeated-px object-list) n)(list-ref (objectrepeated-py object-list) n))
                   #:angle (list-ref (objectrepeated-angle object-list) n)
                   #:x-ratio (list-ref (objectrepeated-xratio object-list) n)
                   #:y-ratio (list-ref (objectrepeated-yratio object-list) n)
                   #:bottom-offset (list-ref (objectrepeated-bottomoffset object-list) n)
                   #:bottom-level (list-ref (objectrepeated-bottomlevel object-list) n)
                   #:use-xy-fix-size (list-ref (objectrepeated-usexyfixsize object-list) n))
           (object (list-ref (objectrepeated-name object-list) n)
                   (xy (list-ref (objectrepeated-px object-list) n)(list-ref (objectrepeated-py object-list) n))
                   #:level (list-ref (objectrepeated-bottomoffset object-list) n)
                   #:use-xy-fix-size (list-ref (objectrepeated-usexyfixsize object-list) n)
                   #:x-ratio (list-ref (objectrepeated-xratio object-list) n)
                   #:y-ratio (list-ref (objectrepeated-yratio object-list) n)
                   #:angle (list-ref (objectrepeated-angle object-list) n))
           #;(list))))

(define (recreate-roofs [roof-list (get-roofs)])
  (delete-elements (roofrepeated-guid roof-list))
  (for ([n (length (roofrepeated-guid roof-list))])
       (let ((points (list-ref (roofrepeated-points roof-list) n)))
         ;(displayln (list-ref (roofrepeated-type roof-list) n))
         ;(displayln (list-ref (roofrepeated-material roof-list) n))
         (roof (extract-list-of-points (pointsmessage-px points)(pointsmessage-py points)(pointsmessage-pz points))
               #:bottom-level (list-ref (roofrepeated-bottomlevel roof-list) n)
               #:thickness (list-ref (roofrepeated-thickness roof-list) n)
               #:type-of-material (list-ref (roofrepeated-type roof-list) n)
               #:material (list-ref (roofrepeated-material roof-list) n)
               ;Currently roofs don't have sub-polygons, i.e. holes. In the future it may be added
               ;#:sub-polygons (intlistmsg-ilist (list-ref (roofrepeated-subpolygons roof-list) n))
               #:height (list-ref (roofrepeated-height roof-list) n)))))

(define (recreate-lines [lines-list (get-lines)])
  (for/list ([line (getlinesmsg-lines lines-list)])
            (write-msg "Line" line)))

(define (recreate-lines! [lines-list (get-lines)])
  (delete-elements (getlinesmsg-guids lines-list))
  (recreate-lines lines-list))
  
(define (retrieve-pts-line line)
  (for/list ([x (pointsmessage-px (linemsg-pts line))]
             [y (pointsmessage-py (linemsg-pts line))]
             [z (pointsmessage-pz (linemsg-pts line))])
            (xyz x y z)))

(define (walls-from-lines)
  (let ((lines (get-lines)))
    (for ([line (getlinesmsg-lines lines)])
         (walls (retrieve-pts-line line)))))

(define (recreate-polylines [polylines-list (get-polylines)])
  (for/list ([polyline (getpolylinesmsg-polylines polylines-list)])
            (write-msg "PolyLine" polyline)))

(define (recreate-polylines! [polylines-list (get-polylines)])
  (delete-elements (getpolylinesmsg-guids polylines-list))
  (recreate-lines polylines-list))

(define (retrieve-pts-polyline polyline)
  (for/list ([x (pointsmessage-px (polylinemsg-pts polyline))]
             [y (pointsmessage-py (polylinemsg-pts polyline))]
             [z (pointsmessage-pz (polylinemsg-pts polyline))])
            (xyz x y z)))

(define (retrieve-arcs-polyline polyline)
  (for/list ([arc (polyarcsmessage-arcangle (polylinemsg-arcs polyline))])
            arc))

(define (walls-from-polylines)
  (let ((polylines (get-polylines)))
    (for ([polyline (getpolylinesmsg-polylines polylines)])
         (walls (retrieve-pts-polyline polyline)
                #:arcs (retrieve-arcs-polyline polyline)))))

#|
Had to do change the function ClickAnElem provided by the API
It wasn't working correctly, the action of selecting an element was being
cancelled without anything occuring, I suspect that it cancelled due to
ArchiCAD not being selected.
|#
(define (select-element)
  (write-msg-name "SelectElement")
  (read-guid))

(define (highlight-element elem-id)
  (let* ((eleList (if (list? elem-id)
                      elem-id
                      (list elem-id)))
         (msg (elementidlist* #:guid eleList
                              #:crashmaterial #f)))
    (write-msg "Highlight" msg)))